/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Subset of the JSON Schema.
 * Types are enforced to validate everything: each value MUST have a `type`.
 * Therefore, unlike the spec, booleans are not allowed as schemas.
 * @see http://json-schema.org/latest/json-schema-validation.html
 * Not all validation features are supported: just follow the interface.
 * \@todo When TS 2.8, explore if this schemas can be split for object and arrays with conditional types.
 * @record
 */
export function JSONSchema() { }
function JSONSchema_tsickle_Closure_declarations() {
    /**
     * Type for a primitive value.
     * Always explicit the `type`: it will be required in v8.
     * Avoid `null` type: it will be removed in v8.
     * @type {?|undefined}
     */
    JSONSchema.prototype.type;
    /**
     * List of properties schemas for an object.
     * @type {?|undefined}
     */
    JSONSchema.prototype.properties;
    /**
     * Array of names of the required properties for an object.
     * Properties set as required should be present in 'properties' too.
     * Note that in the last spec, booleans are not supported anymore.
     * @type {?|undefined}
     */
    JSONSchema.prototype.required;
    /**
     * Schema for the values of an array.
     * 'type' of values should be a string (not an array of type).
     * Avoid using an array of JSON schemas: it won't be possible anymore in v8.
     * @type {?|undefined}
     */
    JSONSchema.prototype.items;
    /**
     * Checks if a value is strictly equal to this.
     * @type {?|undefined}
     */
    JSONSchema.prototype.const;
    /**
     * Checks if a value is strictly equal to one of the value of enum.
     * Avoid mixing types: it won't be possible anymore in v8.
     * @type {?|undefined}
     */
    JSONSchema.prototype.enum;
    /**
     * Minumum lenght for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.maxLength;
    /**
     * Minumum lenght for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.minLength;
    /**
     * Pattern to match for a string.
     * Must be a valid regular expression, WITHOUT the / delimiters.
     * @type {?|undefined}
     */
    JSONSchema.prototype.pattern;
    /**
     * Check if a number is a multiple of x.
     * Must be strictly greater than 0.
     * @type {?|undefined}
     */
    JSONSchema.prototype.multipleOf;
    /**
     * Check if a number is less or equal than this maximum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.maximum;
    /**
     * Check if a number is strictly less than this maximum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.exclusiveMaximum;
    /**
     * Check if a number is greater or equal than this minimum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.minimum;
    /**
     * Check if a number is strictly greater than this minimum.
     * @type {?|undefined}
     */
    JSONSchema.prototype.exclusiveMinimum;
    /**
     * Check if an array length is less or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.maxItems;
    /**
     * Check if an array length is greater or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchema.prototype.minItems;
    /**
     * Check if an array only have unique values.
     * @type {?|undefined}
     */
    JSONSchema.prototype.uniqueItems;
    /* TODO: handle strange member:
    [k: string]: any;
    */
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1zY2hlbWEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRpb24vanNvbi1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3Vic2V0IG9mIHRoZSBKU09OIFNjaGVtYS5cbiAqIFR5cGVzIGFyZSBlbmZvcmNlZCB0byB2YWxpZGF0ZSBldmVyeXRoaW5nOiBlYWNoIHZhbHVlIE1VU1QgaGF2ZSBhIGB0eXBlYC5cbiAqIFRoZXJlZm9yZSwgdW5saWtlIHRoZSBzcGVjLCBib29sZWFucyBhcmUgbm90IGFsbG93ZWQgYXMgc2NoZW1hcy5cbiAqIEBzZWUgaHR0cDovL2pzb24tc2NoZW1hLm9yZy9sYXRlc3QvanNvbi1zY2hlbWEtdmFsaWRhdGlvbi5odG1sXG4gKiBOb3QgYWxsIHZhbGlkYXRpb24gZmVhdHVyZXMgYXJlIHN1cHBvcnRlZDoganVzdCBmb2xsb3cgdGhlIGludGVyZmFjZS5cbiAqIEB0b2RvIFdoZW4gVFMgMi44LCBleHBsb3JlIGlmIHRoaXMgc2NoZW1hcyBjYW4gYmUgc3BsaXQgZm9yIG9iamVjdCBhbmQgYXJyYXlzIHdpdGggY29uZGl0aW9uYWwgdHlwZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSlNPTlNjaGVtYSB7XG5cbiAgLyoqXG4gICAqIFR5cGUgZm9yIGEgcHJpbWl0aXZlIHZhbHVlLlxuICAgKiBBbHdheXMgZXhwbGljaXQgdGhlIGB0eXBlYDogaXQgd2lsbCBiZSByZXF1aXJlZCBpbiB2OC5cbiAgICogQXZvaWQgYG51bGxgIHR5cGU6IGl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2OC5cbiAgICovXG4gIHR5cGU/OiAnc3RyaW5nJyB8ICdudW1iZXInIHwgJ2ludGVnZXInIHwgJ2Jvb2xlYW4nIHwgJ2FycmF5JyB8ICdvYmplY3QnIHwgJ251bGwnO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgc2NoZW1hcyBmb3IgYW4gb2JqZWN0LlxuICAgKi9cbiAgcHJvcGVydGllcz86IHtcbiAgICBbazogc3RyaW5nXTogSlNPTlNjaGVtYTtcbiAgfTtcblxuICAvKipcbiAgICogQXJyYXkgb2YgbmFtZXMgb2YgdGhlIHJlcXVpcmVkIHByb3BlcnRpZXMgZm9yIGFuIG9iamVjdC5cbiAgICogUHJvcGVydGllcyBzZXQgYXMgcmVxdWlyZWQgc2hvdWxkIGJlIHByZXNlbnQgaW4gJ3Byb3BlcnRpZXMnIHRvby5cbiAgICogTm90ZSB0aGF0IGluIHRoZSBsYXN0IHNwZWMsIGJvb2xlYW5zIGFyZSBub3Qgc3VwcG9ydGVkIGFueW1vcmUuXG4gICAqL1xuICByZXF1aXJlZD86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBTY2hlbWEgZm9yIHRoZSB2YWx1ZXMgb2YgYW4gYXJyYXkuXG4gICAqICd0eXBlJyBvZiB2YWx1ZXMgc2hvdWxkIGJlIGEgc3RyaW5nIChub3QgYW4gYXJyYXkgb2YgdHlwZSkuXG4gICAqIEF2b2lkIHVzaW5nIGFuIGFycmF5IG9mIEpTT04gc2NoZW1hczogaXQgd29uJ3QgYmUgcG9zc2libGUgYW55bW9yZSBpbiB2OC5cbiAgICovXG4gIGl0ZW1zPzogSlNPTlNjaGVtYSB8IEpTT05TY2hlbWFbXTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgdmFsdWUgaXMgc3RyaWN0bHkgZXF1YWwgdG8gdGhpcy5cbiAgICovXG4gIGNvbnN0PzogYW55O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSB2YWx1ZSBpcyBzdHJpY3RseSBlcXVhbCB0byBvbmUgb2YgdGhlIHZhbHVlIG9mIGVudW0uXG4gICAqIEF2b2lkIG1peGluZyB0eXBlczogaXQgd29uJ3QgYmUgcG9zc2libGUgYW55bW9yZSBpbiB2OC5cbiAgICovXG4gIGVudW0/OiBhbnlbXTtcblxuICAvKipcbiAgICogTWludW11bSBsZW5naHQgZm9yIGEgc3RyaW5nLlxuICAgKiBNdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIuXG4gICAqL1xuICBtYXhMZW5ndGg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1pbnVtdW0gbGVuZ2h0IGZvciBhIHN0cmluZy5cbiAgICogTXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLlxuICAgKi9cbiAgbWluTGVuZ3RoPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBQYXR0ZXJuIHRvIG1hdGNoIGZvciBhIHN0cmluZy5cbiAgICogTXVzdCBiZSBhIHZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiwgV0lUSE9VVCB0aGUgLyBkZWxpbWl0ZXJzLlxuICAgKi9cbiAgcGF0dGVybj86IHN0cmluZztcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgYSBtdWx0aXBsZSBvZiB4LlxuICAgKiBNdXN0IGJlIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAwLlxuICAgKi9cbiAgbXVsdGlwbGVPZj86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgbGVzcyBvciBlcXVhbCB0aGFuIHRoaXMgbWF4aW11bS5cbiAgICovXG4gIG1heGltdW0/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIHN0cmljdGx5IGxlc3MgdGhhbiB0aGlzIG1heGltdW0uXG4gICAqL1xuICBleGNsdXNpdmVNYXhpbXVtPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG51bWJlciBpcyBncmVhdGVyIG9yIGVxdWFsIHRoYW4gdGhpcyBtaW5pbXVtLlxuICAgKi9cbiAgbWluaW11bT86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIHRoaXMgbWluaW11bS5cbiAgICovXG4gIGV4Y2x1c2l2ZU1pbmltdW0/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGFycmF5IGxlbmd0aCBpcyBsZXNzIG9yIGVxdWFsIHRvIHRoaXMgdmFsdWUuXG4gICAqIE11c3QgYmUgYSBub24gbmVnYXRpdmUgaW50ZWdlci5cbiAgICovXG4gIG1heEl0ZW1zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhcnJheSBsZW5ndGggaXMgZ3JlYXRlciBvciBlcXVhbCB0byB0aGlzIHZhbHVlLlxuICAgKiBNdXN0IGJlIGEgbm9uIG5lZ2F0aXZlIGludGVnZXIuXG4gICAqL1xuICBtaW5JdGVtcz86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXJyYXkgb25seSBoYXZlIHVuaXF1ZSB2YWx1ZXMuXG4gICAqL1xuICB1bmlxdWVJdGVtcz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFsbG93IG90aGVyIHByb3BlcnRpZXMsIHRvIG5vdCBmYWlsIHdpdGggZXhpc3RpbmcgSlNPTiBzY2hlbWFzLlxuICAgKiBBdm9pZCB0aGlzOiBpdCB3b24ndCBiZSBwb3NzaWJsZSBhbnltb3JlIGluIHY4LlxuICAgKi9cbiAgW2s6IHN0cmluZ106IGFueTtcblxufVxuIl19