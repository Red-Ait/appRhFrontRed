/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Created by bohoffi on 03.04.2017.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { fromEvent as observableFromEvent } from 'rxjs';
import { debounceTime, filter } from 'rxjs/operators';
import { getProperty, setProperty } from '../utils';
import { LocalStorageService } from '../services/ngx-localstorage.service';
import { StorageEventService } from '../services/storage-event.service';
var LocalStorageDirective = /** @class */ (function () {
    function LocalStorageDirective(er, lss, es) {
        var _this = this;
        this.er = er;
        this.lss = lss;
        this.es = es;
        this.lsDebounce = 0;
        this.lsInitFromStorage = false;
        this.lsStoredValue = new EventEmitter();
        this._valuePath = [];
        this.es.stream.pipe(
        // TODO: filter should be more accurate
        filter(function (ev) { return ev.key.indexOf(_this.lsKey) >= 0; }))
            .subscribe(function (ev) {
            setProperty(_this._valuePath.length ? _this._valuePath : ['value'], ev.newValue, _this.er.nativeElement, _this.lsFalsyTransformer);
        });
    }
    /**
     * @return {?}
     */
    LocalStorageDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._initKey();
        this._initFromStorage();
        this._hookEvent();
    };
    Object.defineProperty(LocalStorageDirective.prototype, "lsValuePath", {
        set: /**
         * @param {?} path
         * @return {?}
         */
        function (path) {
            if (path != null) {
                this._valuePath = Array.isArray(path) ? path : path.split(',');
            }
            else {
                this._valuePath = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    LocalStorageDirective.prototype._initKey = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.lsKey) {
            if (!this.er.nativeElement.id && !this.er.nativeElement.name) {
                throw new Error('No key or element id or name supplied!');
            }
            this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;
        }
    };
    /**
     * @private
     * @return {?}
     */
    LocalStorageDirective.prototype._hookEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lsEvent) {
            this._eventSubscription = observableFromEvent(this.er.nativeElement, this.lsEvent).pipe(debounceTime(this.lsDebounce))
                .subscribe(function () {
                _this.lss.asPromisable().set(_this.lsKey, getProperty(_this._valuePath.length ? _this._valuePath : ['value'], _this.er.nativeElement), _this.lsPrefix)
                    .then(function () {
                    _this.lss.asPromisable().get(_this.lsKey, _this.lsPrefix)
                        .then(function (value) {
                        _this.lsStoredValue.emit(value);
                    })
                        .catch(function (err) { return console.error(err); });
                })
                    .catch(function (err) { return console.error(err); });
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    LocalStorageDirective.prototype._initFromStorage = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lsInitFromStorage) {
            this.lss.asPromisable().get(this.lsKey, this.lsPrefix)
                .then(function (storedValue) {
                setProperty(_this._valuePath.length ? _this._valuePath : ['value'], storedValue, _this.er.nativeElement, _this.lsFalsyTransformer);
            })
                .catch(function (err) { return console.error(err); });
        }
    };
    /**
     * @return {?}
     */
    LocalStorageDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._eventSubscription && !this._eventSubscription.closed) {
            this._eventSubscription.unsubscribe();
        }
    };
    LocalStorageDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxLocalStorage]'
                },] }
    ];
    /** @nocollapse */
    LocalStorageDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LocalStorageService },
        { type: StorageEventService }
    ]; };
    LocalStorageDirective.propDecorators = {
        lsKey: [{ type: Input, args: ['ngxLocalStorage',] }],
        lsPrefix: [{ type: Input }],
        lsEvent: [{ type: Input }],
        lsDebounce: [{ type: Input }],
        lsInitFromStorage: [{ type: Input }],
        lsFalsyTransformer: [{ type: Input }],
        lsStoredValue: [{ type: Output }],
        lsValuePath: [{ type: Input }]
    };
    return LocalStorageDirective;
}());
export { LocalStorageDirective };
if (false) {
    /** @type {?} */
    LocalStorageDirective.prototype.lsKey;
    /** @type {?} */
    LocalStorageDirective.prototype.lsPrefix;
    /** @type {?} */
    LocalStorageDirective.prototype.lsEvent;
    /** @type {?} */
    LocalStorageDirective.prototype.lsDebounce;
    /** @type {?} */
    LocalStorageDirective.prototype.lsInitFromStorage;
    /** @type {?} */
    LocalStorageDirective.prototype.lsFalsyTransformer;
    /** @type {?} */
    LocalStorageDirective.prototype.lsStoredValue;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype._eventSubscription;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype._valuePath;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype.er;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype.lss;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype.es;
}
//# sourceMappingURL=data:application/json;base64,