/**
 * Created by bohoffi on 22.05.2017.
*/
import { ModuleConfig } from '../interfaces';
export declare class PromisableService {
    private readonly _prefix;
    private readonly _allowNull;
    constructor(config?: ModuleConfig);
    /**
     * Gets the number of entries in the applications local storage.
     */
    count(): Promise<number>;
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     */
    getKey(index: number): Promise<string | null>;
    /**
     * Adds tha value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    set(key: string, value: string, prefix?: string): Promise<boolean>;
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    get(key: string, prefix?: string): Promise<string | null>;
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     */
    remove(key: string, prefix?: string): Promise<boolean>;
    /**
     * Clears all entries of the applications local storage.
     */
    clear(): Promise<boolean>;
}
