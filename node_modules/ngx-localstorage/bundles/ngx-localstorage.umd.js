(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-localstorage', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-localstorage'] = {}),global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,i0,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PromisableService = /** @class */ (function () {
        function PromisableService(config) {
            if (config) {
                this._prefix = config.prefix || this._prefix;
                this._allowNull = config.allowNull || this._allowNull;
            }
        }
        /**
         * Gets the number of entries in the applications local storage.
         */
        /**
         * Gets the number of entries in the applications local storage.
         * @return {?}
         */
        PromisableService.prototype.count = /**
         * Gets the number of entries in the applications local storage.
         * @return {?}
         */
            function () {
                return new Promise(function (resolve, reject) {
                    try {
                        resolve(localStorage.length);
                    }
                    catch (error) {
                        reject(error);
                    }
                });
            };
        /**
         * Returns the nth (defined by the index parameter) key in the storage.
         * The order of keys is user-agent defined, so you should not rely on it.
         * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
         */
        /**
         * Returns the nth (defined by the index parameter) key in the storage.
         * The order of keys is user-agent defined, so you should not rely on it.
         * @param {?} index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
         * @return {?}
         */
        PromisableService.prototype.getKey = /**
         * Returns the nth (defined by the index parameter) key in the storage.
         * The order of keys is user-agent defined, so you should not rely on it.
         * @param {?} index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
         * @return {?}
         */
            function (index) {
                return new Promise(function (resolve, reject) {
                    if (index < 0) {
                        reject(new Error('index has to be 0 or greater'));
                    }
                    try {
                        resolve(localStorage.key(index));
                    }
                    catch (error) {
                        reject(error);
                    }
                });
            };
        /**
         * Adds tha value with the given key or updates an existing entry.
         * @param key     Key to store.
         * @param value   Value to store.
         * @param prefix  Optional prefix to overwrite the configured one.
         */
        /**
         * Adds tha value with the given key or updates an existing entry.
         * @param {?} key     Key to store.
         * @param {?} value   Value to store.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
        PromisableService.prototype.set = /**
         * Adds tha value with the given key or updates an existing entry.
         * @param {?} key     Key to store.
         * @param {?} value   Value to store.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
            function (key, value, prefix) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    try {
                        if (_this._allowNull
                            || (!_this._allowNull && value !== 'null' && value !== null && value !== undefined)) {
                            localStorage.setItem((prefix || _this._prefix) + "_" + key, value);
                        }
                        else {
                            return _this.remove(key, prefix);
                        }
                        resolve(true);
                    }
                    catch (error) {
                        reject(error);
                    }
                });
            };
        /**
         * Gets the entry specified by the given key or null.
         * @param key     Key identifying the wanted entry.
         * @param prefix  Optional prefix to overwrite the configured one.
         */
        /**
         * Gets the entry specified by the given key or null.
         * @param {?} key     Key identifying the wanted entry.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
        PromisableService.prototype.get = /**
         * Gets the entry specified by the given key or null.
         * @param {?} key     Key identifying the wanted entry.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
            function (key, prefix) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    try {
                        resolve(localStorage.getItem((prefix || _this._prefix) + "_" + key));
                    }
                    catch (error) {
                        reject(error);
                    }
                });
            };
        /**
         * Removes the entry specified by the given key.
         * @param key     Key identifying the entry to remove.
         * @param prefix  Optional prefix to overwrite the configured one.
         */
        /**
         * Removes the entry specified by the given key.
         * @param {?} key     Key identifying the entry to remove.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
        PromisableService.prototype.remove = /**
         * Removes the entry specified by the given key.
         * @param {?} key     Key identifying the entry to remove.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
            function (key, prefix) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    try {
                        localStorage.removeItem((prefix || _this._prefix) + "_" + key);
                        resolve(true);
                    }
                    catch (error) {
                        reject(error);
                    }
                });
            };
        /**
         * Clears all entries of the applications local storage.
         */
        /**
         * Clears all entries of the applications local storage.
         * @return {?}
         */
        PromisableService.prototype.clear = /**
         * Clears all entries of the applications local storage.
         * @return {?}
         */
            function () {
                return new Promise(function (resolve, reject) {
                    try {
                        localStorage.clear();
                        resolve(true);
                    }
                    catch (error) {
                        reject(error);
                    }
                });
            };
        return PromisableService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getProperty = function (path, object) {
        return path.reduce(function (obj, p) { return (!!obj) ? obj[p] : null; }, object);
    };
    /** @type {?} */
    var setProperty = function (path, value, object, falsyTransformer) {
        /** @type {?} */
        var lastKeyIndex = path.length - 1;
        for (var i = 0; i < lastKeyIndex; ++i) {
            /** @type {?} */
            var key = path[i];
            if (!(key in object)) {
                object[key] = {};
            }
            object = object[key];
        }
        object[path[lastKeyIndex]] = (!value || (typeof value === 'string' && value === 'false'))
            && !!falsyTransformer ? falsyTransformer() : value;
    };
    /** @type {?} */
    var defaultConfig = {
        allowNull: true,
        prefix: 'ngx_local_storage'
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ModuleConfigToken = new i0.InjectionToken('moduleConfig');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LocalStorageService = /** @class */ (function () {
        function LocalStorageService(config) {
            if (config) {
                this._prefix = config.prefix || defaultConfig.prefix;
                this._allowNull = config.allowNull || defaultConfig.allowNull;
            }
            this._promisable = new PromisableService({
                allowNull: this._allowNull,
                prefix: this._prefix
            });
        }
        /**
         * @return {?}
         */
        LocalStorageService.prototype.asPromisable = /**
         * @return {?}
         */
            function () {
                return this._promisable;
            };
        /**
         * Gets the number of entries in the applications local storage.
         */
        /**
         * Gets the number of entries in the applications local storage.
         * @return {?}
         */
        LocalStorageService.prototype.count = /**
         * Gets the number of entries in the applications local storage.
         * @return {?}
         */
            function () {
                try {
                    return localStorage.length;
                }
                catch (error) {
                    console.error(error);
                }
            };
        /**
         * Returns the nth (defined by the index parameter) key in the storage.
         * The order of keys is user-agent defined, so you should not rely on it.
         * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
         */
        /**
         * Returns the nth (defined by the index parameter) key in the storage.
         * The order of keys is user-agent defined, so you should not rely on it.
         * @param {?} index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
         * @return {?}
         */
        LocalStorageService.prototype.getKey = /**
         * Returns the nth (defined by the index parameter) key in the storage.
         * The order of keys is user-agent defined, so you should not rely on it.
         * @param {?} index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
         * @return {?}
         */
            function (index) {
                if (index < 0) {
                    console.error(new Error('index has to be 0 or greater'));
                }
                try {
                    return localStorage.key(index);
                }
                catch (error) {
                    console.error(error);
                }
            };
        /**
         * Adds tha value with the given key or updates an existing entry.
         * @param key     Key to store.
         * @param value   Value to store.
         * @param prefix  Optional prefix to overwrite the configured one.
         */
        /**
         * Adds tha value with the given key or updates an existing entry.
         * @param {?} key     Key to store.
         * @param {?} value   Value to store.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
        LocalStorageService.prototype.set = /**
         * Adds tha value with the given key or updates an existing entry.
         * @param {?} key     Key to store.
         * @param {?} value   Value to store.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
            function (key, value, prefix) {
                if (this._allowNull ||
                    (!this._allowNull &&
                        value !== 'null' &&
                        value !== null &&
                        value !== undefined)) {
                    localStorage.setItem((prefix || this._prefix) + "_" + key, value);
                }
                else {
                    this.remove(key, prefix);
                }
            };
        /**
         * Gets the entry specified by the given key or null.
         * @param key     Key identifying the wanted entry.
         * @param prefix  Optional prefix to overwrite the configured one.
         */
        /**
         * Gets the entry specified by the given key or null.
         * @param {?} key     Key identifying the wanted entry.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
        LocalStorageService.prototype.get = /**
         * Gets the entry specified by the given key or null.
         * @param {?} key     Key identifying the wanted entry.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
            function (key, prefix) {
                try {
                    return localStorage.getItem((prefix || this._prefix) + "_" + key);
                }
                catch (error) {
                    console.error(error);
                }
            };
        /**
         * Removes the entry specified by the given key.
         * @param key     Key identifying the entry to remove.
         * @param prefix  Optional prefix to overwrite the configured one.
         */
        /**
         * Removes the entry specified by the given key.
         * @param {?} key     Key identifying the entry to remove.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
        LocalStorageService.prototype.remove = /**
         * Removes the entry specified by the given key.
         * @param {?} key     Key identifying the entry to remove.
         * @param {?=} prefix  Optional prefix to overwrite the configured one.
         * @return {?}
         */
            function (key, prefix) {
                try {
                    localStorage.removeItem((prefix || this._prefix) + "_" + key);
                }
                catch (error) {
                    console.error(error);
                }
            };
        /**
         * Clears all entries of the applications local storage.
         */
        /**
         * Clears all entries of the applications local storage.
         * @return {?}
         */
        LocalStorageService.prototype.clear = /**
         * Clears all entries of the applications local storage.
         * @return {?}
         */
            function () {
                try {
                    localStorage.clear();
                }
                catch (error) {
                    console.error(error);
                }
            };
        LocalStorageService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        LocalStorageService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [ModuleConfigToken,] }] }
            ];
        };
        /** @nocollapse */ LocalStorageService.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(i0.inject(ModuleConfigToken)); }, token: LocalStorageService, providedIn: "root" });
        return LocalStorageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StorageEventService = /** @class */ (function () {
        function StorageEventService() {
            var _this = this;
            this._eventStream = new rxjs.BehaviorSubject(null);
            rxjs.fromEvent(window, 'storage')
                .subscribe(function (ev) { return _this._eventStream.next(ev); });
        }
        Object.defineProperty(StorageEventService.prototype, "stream", {
            get: /**
             * @return {?}
             */ function () {
                return this._eventStream
                    .asObservable().pipe(operators.filter(function (ev) { return !!ev; }), operators.share());
            },
            enumerable: true,
            configurable: true
        });
        StorageEventService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        StorageEventService.ctorParameters = function () { return []; };
        /** @nocollapse */ StorageEventService.ngInjectableDef = i0.defineInjectable({ factory: function StorageEventService_Factory() { return new StorageEventService(); }, token: StorageEventService, providedIn: "root" });
        return StorageEventService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LocalStorageDirective = /** @class */ (function () {
        function LocalStorageDirective(er, lss, es) {
            var _this = this;
            this.er = er;
            this.lss = lss;
            this.es = es;
            this.lsDebounce = 0;
            this.lsInitFromStorage = false;
            this.lsStoredValue = new i0.EventEmitter();
            this._valuePath = [];
            this.es.stream.pipe(
            // TODO: filter should be more accurate
            operators.filter(function (ev) { return ev.key.indexOf(_this.lsKey) >= 0; }))
                .subscribe(function (ev) {
                setProperty(_this._valuePath.length ? _this._valuePath : ['value'], ev.newValue, _this.er.nativeElement, _this.lsFalsyTransformer);
            });
        }
        /**
         * @return {?}
         */
        LocalStorageDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this._initKey();
                this._initFromStorage();
                this._hookEvent();
            };
        Object.defineProperty(LocalStorageDirective.prototype, "lsValuePath", {
            set: /**
             * @param {?} path
             * @return {?}
             */ function (path) {
                if (path != null) {
                    this._valuePath = Array.isArray(path) ? path : path.split(',');
                }
                else {
                    this._valuePath = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        LocalStorageDirective.prototype._initKey = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.lsKey) {
                    if (!this.er.nativeElement.id && !this.er.nativeElement.name) {
                        throw new Error('No key or element id or name supplied!');
                    }
                    this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;
                }
            };
        /**
         * @private
         * @return {?}
         */
        LocalStorageDirective.prototype._hookEvent = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.lsEvent) {
                    this._eventSubscription = rxjs.fromEvent(this.er.nativeElement, this.lsEvent).pipe(operators.debounceTime(this.lsDebounce))
                        .subscribe(function () {
                        _this.lss.asPromisable().set(_this.lsKey, getProperty(_this._valuePath.length ? _this._valuePath : ['value'], _this.er.nativeElement), _this.lsPrefix)
                            .then(function () {
                            _this.lss.asPromisable().get(_this.lsKey, _this.lsPrefix)
                                .then(function (value) {
                                _this.lsStoredValue.emit(value);
                            })
                                .catch(function (err) { return console.error(err); });
                        })
                            .catch(function (err) { return console.error(err); });
                    });
                }
            };
        /**
         * @private
         * @return {?}
         */
        LocalStorageDirective.prototype._initFromStorage = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.lsInitFromStorage) {
                    this.lss.asPromisable().get(this.lsKey, this.lsPrefix)
                        .then(function (storedValue) {
                        setProperty(_this._valuePath.length ? _this._valuePath : ['value'], storedValue, _this.er.nativeElement, _this.lsFalsyTransformer);
                    })
                        .catch(function (err) { return console.error(err); });
                }
            };
        /**
         * @return {?}
         */
        LocalStorageDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._eventSubscription && !this._eventSubscription.closed) {
                    this._eventSubscription.unsubscribe();
                }
            };
        LocalStorageDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[ngxLocalStorage]'
                    },] }
        ];
        /** @nocollapse */
        LocalStorageDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: LocalStorageService },
                { type: StorageEventService }
            ];
        };
        LocalStorageDirective.propDecorators = {
            lsKey: [{ type: i0.Input, args: ['ngxLocalStorage',] }],
            lsPrefix: [{ type: i0.Input }],
            lsEvent: [{ type: i0.Input }],
            lsDebounce: [{ type: i0.Input }],
            lsInitFromStorage: [{ type: i0.Input }],
            lsFalsyTransformer: [{ type: i0.Input }],
            lsStoredValue: [{ type: i0.Output }],
            lsValuePath: [{ type: i0.Input }]
        };
        return LocalStorageDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?=} options
     * @return {?}
     */
    function ngxLocalStorage(options) {
        return function (target, propertyDescription) {
            /** @type {?} */
            var service = new LocalStorageService({
                prefix: !!options && !!options.prefix ? options.prefix : ''
            });
            /** @type {?} */
            var key = !!options && !!options.key ? options.key : propertyDescription;
            /** @type {?} */
            var eventService = new StorageEventService();
            eventService.stream.pipe(
            // TODO: filter should be more accurate
            operators.filter(function (ev) { return ev.key.indexOf(key) >= 0; }))
                .subscribe(function (ev) {
                if (!!ev.newValue && typeof ev.newValue === 'string') {
                    if (ev.newValue !== 'null') {
                        target[propertyDescription] = ev.newValue;
                    }
                    else {
                        target[propertyDescription] = !!options.nullTransformer ? options.nullTransformer() : null;
                    }
                }
            });
            Object.defineProperty(target, propertyDescription, {
                get: function () {
                    /** @type {?} */
                    var storageValue = service.get(key);
                    return storageValue == null && !!options.nullTransformer ? options.nullTransformer() : storageValue;
                },
                set: function (value) {
                    service.set(key, value);
                }
            });
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} moduleConfig
     * @return {?}
     */
    function provideStorageService(moduleConfig) {
        return new LocalStorageService(moduleConfig);
    }
    var NgxLocalStorageModule = /** @class */ (function () {
        function NgxLocalStorageModule(parentModule) {
            if (parentModule) {
                throw new Error('NgxLocalStorageModule is already loaded. Import it in the AppModule only');
            }
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        NgxLocalStorageModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: NgxLocalStorageModule,
                    providers: [
                        {
                            provide: ModuleConfigToken,
                            useValue: config
                        },
                        {
                            provide: LocalStorageService,
                            useFactory: provideStorageService,
                            deps: [
                                ModuleConfigToken
                            ]
                        },
                        StorageEventService
                    ]
                };
            };
        NgxLocalStorageModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [
                            LocalStorageDirective
                        ],
                        exports: [
                            LocalStorageDirective
                        ]
                    },] }
        ];
        /** @nocollapse */
        NgxLocalStorageModule.ctorParameters = function () {
            return [
                { type: NgxLocalStorageModule, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return NgxLocalStorageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.LocalStorageService = LocalStorageService;
    exports.StorageEventService = StorageEventService;
    exports.LocalStorageDirective = LocalStorageDirective;
    exports.ngxLocalStorage = ngxLocalStorage;
    exports.provideStorageService = provideStorageService;
    exports.NgxLocalStorageModule = NgxLocalStorageModule;
    exports.ɵa = ModuleConfigToken;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,