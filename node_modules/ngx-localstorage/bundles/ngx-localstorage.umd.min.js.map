{"version":3,"sources":["ng://ngx-localstorage/lib/services/promisable.service.ts","ng://ngx-localstorage/lib/utils.ts","ng://ngx-localstorage/lib/token.ts","ng://ngx-localstorage/lib/services/ngx-localstorage.service.ts","ng://ngx-localstorage/lib/services/storage-event.service.ts","ng://ngx-localstorage/lib/directives/ngx-localstorage.directive.ts","ng://ngx-localstorage/lib/ngx-localstorage.module.ts","ng://ngx-localstorage/lib/decorators.ts"],"names":["PromisableService","config","this","_prefix","prefix","_allowNull","allowNull","prototype","count","Promise","resolve","reject","localStorage","length","error","getKey","index","Error","key","set","value","_this","undefined","remove","setItem","get","getItem","removeItem","clear","setProperty","path","object","falsyTransformer","lastKeyIndex","i","defaultConfig","ModuleConfigToken","InjectionToken","LocalStorageService","_promisable","asPromisable","console","Injectable","args","providedIn","Inject","StorageEventService","_eventStream","BehaviorSubject","observableFromEvent","window","subscribe","ev","next","Object","defineProperty","asObservable","pipe","filter","share","LocalStorageDirective","er","lss","es","lsDebounce","lsInitFromStorage","lsStoredValue","EventEmitter","_valuePath","stream","indexOf","lsKey","newValue","nativeElement","lsFalsyTransformer","ngAfterViewInit","_initKey","_initFromStorage","_hookEvent","Array","isArray","split","id","name","lsEvent","_eventSubscription","debounceTime","reduce","obj","p","lsPrefix","then","emit","catch","err","storedValue","ngOnDestroy","closed","unsubscribe","Directive","selector","ElementRef","Input","Output","provideStorageService","moduleConfig","NgxLocalStorageModule","parentModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule","imports","declarations","exports","decorators","type","Optional","SkipSelf","ngxLocalStorage","options","target","propertyDescription","service","nullTransformer","storageValue"],"mappings":"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","sourcesContent":["/**\r\n * Created by bohoffi on 22.05.2017.\r\n*/\r\nimport {ModuleConfig} from '../interfaces';\r\n\r\nexport class PromisableService {\r\n\r\n  private readonly _prefix: string;\r\n  private readonly _allowNull: boolean;\r\n\r\n  constructor(config?: ModuleConfig) {\r\n    if (config) {\r\n      this._prefix = config.prefix || this._prefix;\r\n      this._allowNull = config.allowNull || this._allowNull;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the number of entries in the applications local storage.\r\n   */\r\n  count(): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        resolve(localStorage.length);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the nth (defined by the index parameter) key in the storage.\r\n   * The order of keys is user-agent defined, so you should not rely on it.\r\n   * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n   */\r\n  getKey(index: number): Promise<string | null> {\r\n    return new Promise<string | null>((resolve, reject) => {\r\n      if (index < 0) {\r\n        reject(new Error('index has to be 0 or greater'));\r\n      }\r\n      try {\r\n        resolve(localStorage.key(index));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds tha value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  set(key: string, value: string, prefix?: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        if (this._allowNull\r\n          || (!this._allowNull && value !== 'null' && value !== null && value !== undefined)) {\r\n          localStorage.setItem(`${prefix || this._prefix}_${key}`, value);\r\n        } else {\r\n          return this.remove(key, prefix);\r\n        }\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  get(key: string, prefix?: string): Promise<string | null> {\r\n    return new Promise<string | null>((resolve, reject) => {\r\n      try {\r\n        resolve(localStorage.getItem(`${prefix || this._prefix}_${key}`));\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the entry specified by the given key.\r\n   * @param key     Key identifying the entry to remove.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  remove(key: string, prefix?: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        localStorage.removeItem(`${prefix || this._prefix}_${key}`);\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears all entries of the applications local storage.\r\n   */\r\n  clear(): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        localStorage.clear();\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n}\r\n","/**\r\n * Created by bohoffi on 04.04.2017.\r\n */\r\nimport {ModuleConfig} from './interfaces';\r\n\r\nexport const getProperty = (path: string[], object: any) =>\r\n  path.reduce((obj: any, p: any) => (!!obj) ? obj[p] : null, object);\r\n\r\nexport const setProperty = (path: string[] | string, value: any, object: any, falsyTransformer?: () => any) => {\r\n  const lastKeyIndex = path.length - 1;\r\n  for (let i = 0; i < lastKeyIndex; ++i) {\r\n    const key = path[i];\r\n    if (!(key in object)) {\r\n      object[key] = {};\r\n    }\r\n    object = object[key];\r\n  }\r\n  object[path[lastKeyIndex]] = (!value || (typeof value === 'string' && value === 'false'))\r\n  && !!falsyTransformer ? falsyTransformer() : value;\r\n};\r\n\r\nexport const defaultConfig: ModuleConfig = {\r\n  allowNull: true,\r\n  prefix: 'ngx_local_storage'\r\n};\r\n","import {ModuleConfig} from './interfaces';\r\nimport {InjectionToken} from '@angular/core';\r\n\r\nexport const ModuleConfigToken = new InjectionToken<ModuleConfig>('moduleConfig');\r\n","import {Injectable, Optional, Inject} from '@angular/core';\r\n\r\nimport {ModuleConfig} from '../interfaces';\r\nimport {PromisableService} from './promisable.service';\r\nimport {defaultConfig} from '../utils';\r\nimport { ModuleConfigToken } from '../token';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class LocalStorageService {\r\n  private readonly _prefix: string;\r\n  private readonly _allowNull: boolean;\r\n  private readonly _promisable: PromisableService;\r\n\r\n  constructor(@Inject(ModuleConfigToken) config?: ModuleConfig) {\r\n    if (config) {\r\n      this._prefix = config.prefix || defaultConfig.prefix;\r\n      this._allowNull = config.allowNull || defaultConfig.allowNull;\r\n    }\r\n    this._promisable = new PromisableService({\r\n      allowNull: this._allowNull,\r\n      prefix: this._prefix\r\n    });\r\n  }\r\n\r\n  asPromisable(): PromisableService {\r\n    return this._promisable;\r\n  }\r\n\r\n  /**\r\n   * Gets the number of entries in the applications local storage.\r\n   */\r\n  count(): number | undefined {\r\n    try {\r\n      return localStorage.length;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the nth (defined by the index parameter) key in the storage.\r\n   * The order of keys is user-agent defined, so you should not rely on it.\r\n   * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n   */\r\n  getKey(index: number): string | null | undefined {\r\n    if (index < 0) {\r\n      console.error(new Error('index has to be 0 or greater'));\r\n    }\r\n    try {\r\n      return localStorage.key(index);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds tha value with the given key or updates an existing entry.\r\n   * @param key     Key to store.\r\n   * @param value   Value to store.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  set(key: string, value: string, prefix?: string): void {\r\n    if (\r\n      this._allowNull ||\r\n      (!this._allowNull &&\r\n        value !== 'null' &&\r\n        value !== null &&\r\n        value !== undefined)\r\n    ) {\r\n      localStorage.setItem(`${prefix || this._prefix}_${key}`, value);\r\n    } else {\r\n      this.remove(key, prefix);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the entry specified by the given key or null.\r\n   * @param key     Key identifying the wanted entry.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  get(key: string, prefix?: string): string | null | undefined {\r\n    try {\r\n      return localStorage.getItem(`${prefix || this._prefix}_${key}`);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the entry specified by the given key.\r\n   * @param key     Key identifying the entry to remove.\r\n   * @param prefix  Optional prefix to overwrite the configured one.\r\n   */\r\n  remove(key: string, prefix?: string): void {\r\n    try {\r\n      localStorage.removeItem(`${prefix || this._prefix}_${key}`);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears all entries of the applications local storage.\r\n   */\r\n  clear(): void {\r\n    try {\r\n      localStorage.clear();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Created by bohoffi on 31.01.2018.\r\n */\r\nimport {Injectable} from '@angular/core';\r\nimport {fromEvent as observableFromEvent, BehaviorSubject, Observable} from 'rxjs';\r\nimport {share, filter} from 'rxjs/operators';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class StorageEventService {\r\n\r\n  private _eventStream: BehaviorSubject<StorageEvent> = new BehaviorSubject<StorageEvent>(null);\r\n\r\n  constructor() {\r\n    observableFromEvent(window, 'storage')\r\n      .subscribe((ev: StorageEvent) => this._eventStream.next(ev));\r\n  }\r\n\r\n  get stream(): Observable<StorageEvent> {\r\n    return this._eventStream\r\n      .asObservable().pipe(\r\n        filter(ev => !!ev),\r\n        share()\r\n      );\r\n  }\r\n}\r\n","/**\r\n * Created by bohoffi on 03.04.2017.\r\n */\r\nimport {AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output} from '@angular/core';\r\nimport {fromEvent as observableFromEvent, Subscription} from 'rxjs';\r\nimport {debounceTime, filter} from 'rxjs/operators';\r\n\r\nimport {getProperty, setProperty} from '../utils';\r\nimport {LocalStorageService} from '../services/ngx-localstorage.service';\r\nimport {StorageEventService} from '../services/storage-event.service';\r\n\r\n@Directive({\r\n  selector: '[ngxLocalStorage]'\r\n})\r\nexport class LocalStorageDirective implements AfterViewInit, OnDestroy {\r\n\r\n  @Input('ngxLocalStorage')\r\n  lsKey: string;\r\n  @Input()\r\n  lsPrefix: string;\r\n  @Input()\r\n  lsEvent: string;\r\n  @Input()\r\n  lsDebounce = 0;\r\n  @Input()\r\n  lsInitFromStorage = false;\r\n  @Input()\r\n  lsFalsyTransformer?: () => any;\r\n\r\n  @Output()\r\n  lsStoredValue = new EventEmitter<any>();\r\n\r\n  private _eventSubscription: Subscription;\r\n  private _valuePath: string[] = [];\r\n\r\n  constructor(private er: ElementRef,\r\n              private lss: LocalStorageService,\r\n              private es: StorageEventService) {\r\n\r\n    this.es.stream.pipe(\r\n    // TODO: filter should be more accurate\r\n      filter((ev: StorageEvent) => ev.key.indexOf(this.lsKey) >= 0)\r\n    )\r\n      .subscribe((ev: StorageEvent) => {\r\n        setProperty(this._valuePath.length ? this._valuePath : ['value'], ev.newValue, this.er.nativeElement, this.lsFalsyTransformer);\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._initKey();\r\n    this._initFromStorage();\r\n    this._hookEvent();\r\n  }\r\n\r\n  @Input()\r\n  set lsValuePath(path: any[] | string) {\r\n    if (path != null) {\r\n      this._valuePath = Array.isArray(path) ? path : path.split(',');\r\n    } else {\r\n      this._valuePath = [];\r\n    }\r\n  }\r\n\r\n  private _initKey(): void {\r\n    if (!this.lsKey) {\r\n      if (!this.er.nativeElement.id && !this.er.nativeElement.name) {\r\n        throw new Error('No key or element id or name supplied!');\r\n      }\r\n      this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;\r\n    }\r\n  }\r\n\r\n  private _hookEvent(): void {\r\n    if (this.lsEvent) {\r\n      this._eventSubscription = observableFromEvent(this.er.nativeElement, this.lsEvent).pipe(\r\n        debounceTime(this.lsDebounce))\r\n        .subscribe(() => {\r\n          this.lss.asPromisable().set(this.lsKey,\r\n            getProperty(this._valuePath.length ? this._valuePath : ['value'], this.er.nativeElement),\r\n            this.lsPrefix)\r\n            .then(() => {\r\n              this.lss.asPromisable().get(this.lsKey, this.lsPrefix)\r\n                .then((value: any) => {\r\n                  this.lsStoredValue.emit(value);\r\n                })\r\n                .catch((err: Error) => console.error(err));\r\n            })\r\n            .catch((err: Error) => console.error(err));\r\n        });\r\n    }\r\n  }\r\n\r\n  private _initFromStorage(): void {\r\n    if (this.lsInitFromStorage) {\r\n      this.lss.asPromisable().get(this.lsKey, this.lsPrefix)\r\n        .then((storedValue: any) => {\r\n          setProperty(this._valuePath.length ? this._valuePath : ['value'], storedValue, this.er.nativeElement, this.lsFalsyTransformer);\r\n        })\r\n        .catch((err: Error) => console.error(err));\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._eventSubscription && !this._eventSubscription.closed) {\r\n      this._eventSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\r\n\r\nimport {ModuleConfig} from './interfaces';\r\nimport {LocalStorageService} from './services/ngx-localstorage.service';\r\nimport {StorageEventService} from './services/storage-event.service';\r\nimport {LocalStorageDirective} from './directives/ngx-localstorage.directive';\r\nimport {ModuleConfigToken} from './token';\r\n\r\nexport function provideStorageService(moduleConfig: ModuleConfig): LocalStorageService {\r\n  return new LocalStorageService(moduleConfig);\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [\r\n    LocalStorageDirective\r\n  ],\r\n  exports: [\r\n    LocalStorageDirective\r\n  ]\r\n})\r\nexport class NgxLocalStorageModule {\r\n  static forRoot(config?: ModuleConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxLocalStorageModule,\r\n      providers: [\r\n        {\r\n          provide: ModuleConfigToken,\r\n          useValue: config\r\n        },\r\n        {\r\n          provide: LocalStorageService,\r\n          useFactory: provideStorageService,\r\n          deps: [\r\n            ModuleConfigToken\r\n          ]\r\n        },\r\n        StorageEventService\r\n      ]\r\n    };\r\n  }\r\n\r\n  constructor(@Optional() @SkipSelf() parentModule: NgxLocalStorageModule) {\r\n    if (parentModule) {\r\n      throw new Error('NgxLocalStorageModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Created by bohoffi on 22.05.2017.\r\n */\r\nimport {filter} from 'rxjs/operators';\r\n\r\nimport {DecoratorOpts} from './interfaces';\r\nimport {LocalStorageService} from './services/ngx-localstorage.service';\r\nimport {StorageEventService} from './services/storage-event.service';\r\n\r\nexport function ngxLocalStorage(options?: DecoratorOpts) {\r\n  return function (target: Object, propertyDescription: string) {\r\n\r\n    const service: LocalStorageService = new LocalStorageService({\r\n      prefix: !!options && !!options.prefix ? options.prefix : ''\r\n    });\r\n\r\n    const key = !!options && !!options.key ? options.key : propertyDescription;\r\n\r\n    const eventService: StorageEventService = new StorageEventService();\r\n    eventService.stream.pipe(\r\n      // TODO: filter should be more accurate\r\n      filter((ev: StorageEvent) => ev.key.indexOf(key) >= 0)\r\n    )\r\n      .subscribe((ev: StorageEvent) => {\r\n        if (!!ev.newValue && typeof ev.newValue === 'string') {\r\n          if (ev.newValue !== 'null') {\r\n            target[propertyDescription] = ev.newValue;\r\n          } else {\r\n            target[propertyDescription] = !!options.nullTransformer ? options.nullTransformer() : null;\r\n          }\r\n        }\r\n      });\r\n\r\n    Object.defineProperty(target, propertyDescription, {\r\n      get: function () {\r\n        const storageValue = service.get(key);\r\n        return storageValue == null && !!options.nullTransformer ? options.nullTransformer() : storageValue;\r\n      },\r\n      set: function (value: any) {\r\n        service.set(key, value);\r\n      }\r\n    });\r\n  };\r\n}\r\n"]}