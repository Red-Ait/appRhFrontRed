/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Created by bohoffi on 03.04.2017.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { fromEvent as observableFromEvent } from 'rxjs';
import { debounceTime, filter } from 'rxjs/operators';
import { getProperty, setProperty } from '../utils';
import { LocalStorageService } from '../services/ngx-localstorage.service';
import { StorageEventService } from '../services/storage-event.service';
export class LocalStorageDirective {
    /**
     * @param {?} er
     * @param {?} lss
     * @param {?} es
     */
    constructor(er, lss, es) {
        this.er = er;
        this.lss = lss;
        this.es = es;
        this.lsDebounce = 0;
        this.lsInitFromStorage = false;
        this.lsStoredValue = new EventEmitter();
        this._valuePath = [];
        this.es.stream.pipe(
        // TODO: filter should be more accurate
        filter((ev) => ev.key.indexOf(this.lsKey) >= 0))
            .subscribe((ev) => {
            setProperty(this._valuePath.length ? this._valuePath : ['value'], ev.newValue, this.er.nativeElement, this.lsFalsyTransformer);
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._initKey();
        this._initFromStorage();
        this._hookEvent();
    }
    /**
     * @param {?} path
     * @return {?}
     */
    set lsValuePath(path) {
        if (path != null) {
            this._valuePath = Array.isArray(path) ? path : path.split(',');
        }
        else {
            this._valuePath = [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    _initKey() {
        if (!this.lsKey) {
            if (!this.er.nativeElement.id && !this.er.nativeElement.name) {
                throw new Error('No key or element id or name supplied!');
            }
            this.lsKey = this.er.nativeElement.id || this.er.nativeElement.name;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _hookEvent() {
        if (this.lsEvent) {
            this._eventSubscription = observableFromEvent(this.er.nativeElement, this.lsEvent).pipe(debounceTime(this.lsDebounce))
                .subscribe(() => {
                this.lss.asPromisable().set(this.lsKey, getProperty(this._valuePath.length ? this._valuePath : ['value'], this.er.nativeElement), this.lsPrefix)
                    .then(() => {
                    this.lss.asPromisable().get(this.lsKey, this.lsPrefix)
                        .then((value) => {
                        this.lsStoredValue.emit(value);
                    })
                        .catch((err) => console.error(err));
                })
                    .catch((err) => console.error(err));
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    _initFromStorage() {
        if (this.lsInitFromStorage) {
            this.lss.asPromisable().get(this.lsKey, this.lsPrefix)
                .then((storedValue) => {
                setProperty(this._valuePath.length ? this._valuePath : ['value'], storedValue, this.er.nativeElement, this.lsFalsyTransformer);
            })
                .catch((err) => console.error(err));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._eventSubscription && !this._eventSubscription.closed) {
            this._eventSubscription.unsubscribe();
        }
    }
}
LocalStorageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxLocalStorage]'
            },] }
];
/** @nocollapse */
LocalStorageDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: LocalStorageService },
    { type: StorageEventService }
];
LocalStorageDirective.propDecorators = {
    lsKey: [{ type: Input, args: ['ngxLocalStorage',] }],
    lsPrefix: [{ type: Input }],
    lsEvent: [{ type: Input }],
    lsDebounce: [{ type: Input }],
    lsInitFromStorage: [{ type: Input }],
    lsFalsyTransformer: [{ type: Input }],
    lsStoredValue: [{ type: Output }],
    lsValuePath: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LocalStorageDirective.prototype.lsKey;
    /** @type {?} */
    LocalStorageDirective.prototype.lsPrefix;
    /** @type {?} */
    LocalStorageDirective.prototype.lsEvent;
    /** @type {?} */
    LocalStorageDirective.prototype.lsDebounce;
    /** @type {?} */
    LocalStorageDirective.prototype.lsInitFromStorage;
    /** @type {?} */
    LocalStorageDirective.prototype.lsFalsyTransformer;
    /** @type {?} */
    LocalStorageDirective.prototype.lsStoredValue;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype._eventSubscription;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype._valuePath;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype.er;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype.lss;
    /**
     * @type {?}
     * @private
     */
    LocalStorageDirective.prototype.es;
}
//# sourceMappingURL=data:application/json;base64,