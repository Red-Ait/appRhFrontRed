/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Created by bohoffi on 31.01.2018.
 */
import { Injectable } from '@angular/core';
import { fromEvent as observableFromEvent, BehaviorSubject } from 'rxjs';
import { share, filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class StorageEventService {
    constructor() {
        this._eventStream = new BehaviorSubject(null);
        observableFromEvent(window, 'storage')
            .subscribe((ev) => this._eventStream.next(ev));
    }
    /**
     * @return {?}
     */
    get stream() {
        return this._eventStream
            .asObservable().pipe(filter(ev => !!ev), share());
    }
}
StorageEventService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
StorageEventService.ctorParameters = () => [];
/** @nocollapse */ StorageEventService.ngInjectableDef = i0.defineInjectable({ factory: function StorageEventService_Factory() { return new StorageEventService(); }, token: StorageEventService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    StorageEventService.prototype._eventStream;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1ldmVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvY2Fsc3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zdG9yYWdlLWV2ZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsSUFBSSxtQkFBbUIsRUFBRSxlQUFlLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDbkYsT0FBTyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHN0MsTUFBTSxPQUFPLG1CQUFtQjtJQUk5QjtRQUZRLGlCQUFZLEdBQWtDLElBQUksZUFBZSxDQUFlLElBQUksQ0FBQyxDQUFDO1FBRzVGLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUM7YUFDbkMsU0FBUyxDQUFDLENBQUMsRUFBZ0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7O0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsWUFBWTthQUNyQixZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQ2xCLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDbEIsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNOLENBQUM7OztZQWhCRixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7Ozs7Ozs7O0lBRzlCLDJDQUE4RiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJvaG9mZmkgb24gMzEuMDEuMjAxOC5cclxuICovXHJcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7ZnJvbUV2ZW50IGFzIG9ic2VydmFibGVGcm9tRXZlbnQsIEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7c2hhcmUsIGZpbHRlcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlRXZlbnRTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBfZXZlbnRTdHJlYW06IEJlaGF2aW9yU3ViamVjdDxTdG9yYWdlRXZlbnQ+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxTdG9yYWdlRXZlbnQ+KG51bGwpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIG9ic2VydmFibGVGcm9tRXZlbnQod2luZG93LCAnc3RvcmFnZScpXHJcbiAgICAgIC5zdWJzY3JpYmUoKGV2OiBTdG9yYWdlRXZlbnQpID0+IHRoaXMuX2V2ZW50U3RyZWFtLm5leHQoZXYpKTtcclxuICB9XHJcblxyXG4gIGdldCBzdHJlYW0oKTogT2JzZXJ2YWJsZTxTdG9yYWdlRXZlbnQ+IHtcclxuICAgIHJldHVybiB0aGlzLl9ldmVudFN0cmVhbVxyXG4gICAgICAuYXNPYnNlcnZhYmxlKCkucGlwZShcclxuICAgICAgICBmaWx0ZXIoZXYgPT4gISFldiksXHJcbiAgICAgICAgc2hhcmUoKVxyXG4gICAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=